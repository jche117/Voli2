"""create roles table and link to users

Revision ID: 4c54a769eaed
Revises: e8d3512e374a
Create Date: 2025-08-13 15:18:03.758174

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '4c54a769eaed'
down_revision = 'e8d3512e374a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    roles_table = op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_id'), 'roles', ['id'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    user_roles_table = op.create_table('user_roles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )

    # ### Begin Data Migration ###
    # Insert default roles
    op.bulk_insert(roles_table,
        [
            {'name': 'administrator', 'description': 'Super user with all permissions'},
            {'name': 'user', 'description': 'Standard user with basic permissions'}
        ]
    )

    # Get connection and session
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Find the administrator role ID
    admin_role_id_result = session.execute(
        sa.text("SELECT id FROM roles WHERE name = 'administrator'")
    ).scalar_one_or_none()

    # Proceed only if the admin role was created successfully
    if admin_role_id_result:
        admin_role_id = admin_role_id_result

        # Find users who were admins
        admin_users_results = session.execute(
            sa.text("SELECT id FROM users WHERE is_admin = TRUE")
        ).fetchall()

        # Create a list of user_roles to insert
        if admin_users_results:
            user_roles_to_insert = [
                {'user_id': user_id, 'role_id': admin_role_id}
                for (user_id,) in admin_users_results
            ]
            # Bulk insert the migrated admin users into the user_roles table
            op.bulk_insert(user_roles_table, user_roles_to_insert)

    session.commit()
    # ### End Data Migration ###

    op.drop_column('users', 'is_admin')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))

    # ### Begin Data Migration for Downgrade ###
    bind = op.get_bind()
    session = sa.orm.Session(bind=bind)

    # Find the administrator role ID
    admin_role_id_result = session.execute(
        sa.text("SELECT id FROM roles WHERE name = 'administrator'")
    ).scalar_one_or_none()

    # If admin role existed, find users with that role
    if admin_role_id_result:
        admin_role_id = admin_role_id_result
        admin_users_results = session.execute(
            sa.text(f"SELECT user_id FROM user_roles WHERE role_id = {admin_role_id}")
        ).fetchall()

        if admin_users_results:
            # Get just the user IDs
            admin_user_ids = [user_id for (user_id,) in admin_users_results]
            # Update the users table
            op.execute(
                sa.text("UPDATE users SET is_admin = TRUE WHERE id IN :user_ids").
                bindparams(user_ids=tuple(admin_user_ids))
            )

    session.commit()
    # ### End Data Migration for Downgrade ###

    op.drop_table('user_roles')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_id'), table_name='roles')
    op.drop_table('roles')
    # ### end Alembic commands ###
